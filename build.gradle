import org.apache.tools.ant.filters.ReplaceTokens

buildscript {

    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id "java"
    id "application"
    id "com.gorylenko.gradle-git-properties" version "$gradleGitPluginVersion"
    id "com.github.ben-manes.versions" version "$versionsPluginVersion"
    id "org.springframework.boot" version "$springBootVersion"
}

group = 'space.npstr.icu'
version = '0.1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

repositories {
    mavenCentral()                          // everything else
    maven { url = 'https://jitpack.io' }    // for getting builds from github
}


dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"

    implementation "net.dv8tion:JDA:$jdaVersion"
    implementation "ch.qos.logback:logback-classic"
    implementation "io.sentry:sentry-logback:$sentryVersion"
    implementation "io.sentry:sentry-spring-boot-starter-jakarta:$sentryVersion"
    runtimeOnly "org.postgresql:postgresql"
    implementation "com.github.ben-manes.caffeine:caffeine"
    compileOnly "com.google.code.findbugs:jsr305:$findbugsVersion" // to avoid warning about some missing annotations
}

tasks.withType(JavaCompile).configureEach {
    dependsOn(processResources)
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

bootJar {
    archiveFileName.set("icu.jar")
    doLast {
        copy {
            from 'build/libs/icu.jar'
            into '.'
        }
    }
}

processResources {
    //inject values into app.properties
    def projectVersion = project.version
    def projectGroup = project.group
    def projectName = project.name
    filesMatching("**/app.properties") {
        filter ReplaceTokens, tokens: [
                "project.version"   : projectVersion,
                "project.groupId"   : projectGroup,
                "project.artifactId": projectName,
                "env.BUILD_NUMBER"  : (System.getenv('CI') ? System.getenv('BUILD_NUMBER') : 'DEV'),
                "env.BUILD_TIME"    : System.currentTimeMillis() + ''
        ]
    }
}

dependencyLocking {
    lockAllConfigurations()
}

// ./gradlew resolveAndLockAll --write-locks
task resolveAndLockAll {
    doFirst {
        assert gradle.startParameter.writeDependencyLocks
    }
    doLast {
        configurations.all {
            resolutionStrategy {
                componentSelection properReleasesOnly()
            }
        }
        configurations
                .findAll { it.canBeResolved }
                .each { it.resolve() }
    }
}

// https://github.com/ben-manes/gradle-versions-plugin
dependencyUpdates.resolutionStrategy {
    componentSelection properReleasesOnly()
}

static def properReleasesOnly() {
    return { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'preview', 'm1', 'm2', 'm3', 'cr1'].any {
                q -> selection.candidate.version.toLowerCase().contains(q) && !selection.candidate.module.equals("JDA")
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
