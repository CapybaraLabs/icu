pluginManagement {
	repositories {
		gradlePluginPortal()
		mavenCentral()
	}
}

rootProject.name = 'icu'

ext {
	//@formatter:off

	springBootVersion       = '[3.2, 3.3['

	gradleGitVersion        = '[2.4.0, 3.0['
	versionsVersion         = '0.+'

	jdaVersion              = '[5.0.0-beta.5, 5.1['
	sentryVersion           = '[7.0.0, 8.0['
	findbugsVersion			= '[3.0.2, 4.0['

	//@formatter:on
}

dependencyResolutionManagement {

	versionCatalogs {
		libs {
			version("spring-boot", "$springBootVersion")

			plugin("gitprops", "com.gorylenko.gradle-git-properties").version("$gradleGitVersion")
			plugin("spring", "org.springframework.boot").version("$springBootVersion")
			plugin("versions", "com.github.ben-manes.versions").version("$versionsVersion")

			library("spring-boot-bom", "org.springframework.boot", "spring-boot-dependencies").versionRef("spring-boot")
			library("spring-boot-starter", "org.springframework.boot", "spring-boot-starter").withoutVersion()
			library("spring-boot-starter-data-jpa", "org.springframework.boot", "spring-boot-starter-data-jpa").withoutVersion()

			library("jda", "net.dv8tion:JDA:$jdaVersion")
			library("logback", "ch.qos.logback", "logback-classic").withoutVersion()
			library("sentry", "io.sentry:sentry-logback:$sentryVersion")
			library("sentry-spring-starter", "io.sentry:sentry-spring-boot-starter-jakarta:$sentryVersion")
			library("postgresql", "org.postgresql", "postgresql").withoutVersion()
			library("caffeine", "com.github.ben-manes.caffeine", "caffeine").withoutVersion()
			library("findbugs", "com.google.code.findbugs:jsr305:$findbugsVersion")
		}
	}
}
