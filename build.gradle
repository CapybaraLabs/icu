import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        //@formatter:off

        //plugin versions
        gradleGitVersion        = '2.+'
        shadowVersion           = '7.+'
        versionsVersion         = '0.+'

        jdaVersion              = '[4.4.0_351, 4.5['
        logbackVersion          = '[1.2.3, 2.0['
        sentryVersion           = '[5.0.1, 6.0['
        okhttpVersion           = '[3.14.1, 4.0['
        yamlVersion             = '[1.24, 2.0['
        sqlsauceVersion         = '[0.4.3, 0.5['
        hibernateVersion        = '5.4.27.Final'
        annotationsVersion      = '[0.0.1, 0.1['
        jaxbApiVersion          = '[2.3.1, 3.0['
        caffeineVersion         = '[3.0.1, 4.0['
        dsProxyVersion          = '[1.5.1, 2.0['

        //@formatter:on
    }
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitVersion}"
        classpath "gradle.plugin.com.github.johnrengelman:shadow:${shadowVersion}"
        classpath "com.github.ben-manes:gradle-versions-plugin:${versionsVersion}"
    }

    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'com.github.ben-manes.versions'


group 'space.npstr.icu'
version '0.1.0-SNAPSHOT'

mainClassName = 'space.npstr.icu.Main'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

repositories {
    maven {
        url 'https://m2.dv8tion.net/releases'
        content { includeModule("net.dv8tion", "JDA") }
        content { includeGroup("club.minnced") }
    }
    mavenCentral()                          // everything else
    maven { url 'https://jitpack.io' }      // for getting builds from github
}


dependencies {
    //@formatter:off

    implementation "net.dv8tion:JDA:$jdaVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "io.sentry:sentry-logback:$sentryVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "org.yaml:snakeyaml:$yamlVersion"
    implementation "space.npstr.SqlSauce:sqlsauce-core:$sqlsauceVersion"
    implementation "space.npstr.SqlSauce:discord-entities:$sqlsauceVersion"
    implementation "org.hibernate:hibernate-jcache:$hibernateVersion"
    implementation "com.github.ben-manes.caffeine:jcache:$caffeineVersion"
    implementation "space.npstr:annotations:$annotationsVersion"
    implementation "javax.xml.bind:jaxb-api:$jaxbApiVersion"
    implementation "net.ttddyy:datasource-proxy:$dsProxyVersion"

    //@formatter:on
}

compileJava.dependsOn 'clean'
compileJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

shadowJar {
    archiveFileName.set("icu.jar")
}

processResources {
    //inject values into app.properties
    filesMatching("**/app.properties") {
        filter ReplaceTokens, tokens: [
                "project.version"   : project.version,
                "project.groupId"   : project.group,
                "project.artifactId": project.name,
                "env.BUILD_NUMBER"  : (System.getenv('CI') ? System.getenv('BUILD_NUMBER') : 'DEV'),
                "env.BUILD_TIME"    : System.currentTimeMillis() + ''
        ]
    }
}

dependencyLocking {
    lockAllConfigurations()
}

// ./gradlew resolveAndLockAll --write-locks
task resolveAndLockAll {
    doFirst {
        assert gradle.startParameter.writeDependencyLocks
    }
    doLast {
        configurations.all {
            resolutionStrategy {
                componentSelection properReleasesOnly()
            }
        }
        configurations
                .findAll { it.canBeResolved }
                .each { it.resolve() }
    }
}

// https://github.com/ben-manes/gradle-versions-plugin
dependencyUpdates.resolutionStrategy {
    componentSelection properReleasesOnly()
}

static def properReleasesOnly() {
    return { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'preview', 'm1', 'm2', 'm3'].any {
                q -> selection.candidate.version.toLowerCase().contains(q)
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
