import org.apache.tools.ant.filters.ReplaceTokens

buildscript {

    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id 'java'
    id 'application'
    alias(libs.plugins.gitprops)
    alias(libs.plugins.shadow)
    alias(libs.plugins.versions)
}

group 'space.npstr.icu'
version '0.1.0-SNAPSHOT'

mainClassName = 'space.npstr.icu.Main'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

repositories {
    maven {
        url 'https://m2.dv8tion.net/releases'
        content { includeModule("net.dv8tion", "JDA") }
        content { includeGroup("club.minnced") }
    }
    mavenCentral()                          // everything else
    maven { url 'https://jitpack.io' }      // for getting builds from github
}


dependencies {
    //@formatter:off

    implementation libs.jda
    implementation libs.logback
    implementation libs.sentry
    implementation libs.okhttp
    implementation libs.yaml
    implementation libs.sqlsauce.core
    implementation libs.sqlsauce.discord
    implementation libs.hibernate.jcache
    implementation libs.caffeine.jcache
    implementation libs.annotations
    implementation libs.jaxb
    implementation libs.dsproxy

    //@formatter:on
}

compileJava.dependsOn 'clean'
compileJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

shadowJar {
    archiveFileName.set("icu.jar")
}

processResources {
    //inject values into app.properties
    filesMatching("**/app.properties") {
        filter ReplaceTokens, tokens: [
                "project.version"   : project.version,
                "project.groupId"   : project.group,
                "project.artifactId": project.name,
                "env.BUILD_NUMBER"  : (System.getenv('CI') ? System.getenv('BUILD_NUMBER') : 'DEV'),
                "env.BUILD_TIME"    : System.currentTimeMillis() + ''
        ]
    }
}

dependencyLocking {
    lockAllConfigurations()
}

// ./gradlew resolveAndLockAll --write-locks
task resolveAndLockAll {
    doFirst {
        assert gradle.startParameter.writeDependencyLocks
    }
    doLast {
        configurations.all {
            resolutionStrategy {
                componentSelection properReleasesOnly()
            }
        }
        configurations
                .findAll { it.canBeResolved }
                .each { it.resolve() }
    }
}

// https://github.com/ben-manes/gradle-versions-plugin
dependencyUpdates.resolutionStrategy {
    componentSelection properReleasesOnly()
}

static def properReleasesOnly() {
    return { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'preview', 'm1', 'm2', 'm3', 'cr1'].any {
                q -> selection.candidate.version.toLowerCase().contains(q)
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
